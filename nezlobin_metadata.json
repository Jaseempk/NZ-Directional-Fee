{
  "compiler": {
    "version": "0.8.26+commit.8a97fa7a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "contract IPoolManager",
            "name": "_manager",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "priceFeedAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "HookNotImplemented"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidPool"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "LockFailure"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NZD__FeeFactorIsTooBig"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NZD__MustBeDynamicFee"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NZD__OnlyOwnerAccess"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotPoolManager"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotSelf"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "ALPHA_PRECISION",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "CDELTA_PRECISION",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "PRICE_IMPACT_PRECISION",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.ModifyLiquidityParams",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "delta",
            "type": "int256"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterAddLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterDonate",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint160",
            "name": "",
            "type": "uint160"
          },
          {
            "internalType": "int24",
            "name": "",
            "type": "int24"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterInitialize",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.ModifyLiquidityParams",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "afterRemoveLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.SwapParams",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "zeroForOne",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "amountSpecified",
                "type": "int256"
              },
              {
                "internalType": "uint160",
                "name": "sqrtPriceLimitX96",
                "type": "uint160"
              }
            ]
          },
          {
            "internalType": "BalanceDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "afterSwap",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "int128",
            "name": "",
            "type": "int128"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "alpha",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.ModifyLiquidityParams",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeAddLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeDonate",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "uint160",
            "name": "",
            "type": "uint160"
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeInitialize",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.ModifyLiquidityParams",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "int24",
                "name": "tickLower",
                "type": "int24"
              },
              {
                "internalType": "int24",
                "name": "tickUpper",
                "type": "int24"
              },
              {
                "internalType": "int256",
                "name": "liquidityDelta",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "salt",
                "type": "bytes32"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeRemoveLiquidity",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          },
          {
            "internalType": "struct IPoolManager.SwapParams",
            "name": "params",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "zeroForOne",
                "type": "bool"
              },
              {
                "internalType": "int256",
                "name": "amountSpecified",
                "type": "int256"
              },
              {
                "internalType": "uint160",
                "name": "sqrtPriceLimitX96",
                "type": "uint160"
              }
            ]
          },
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "beforeSwap",
        "outputs": [
          {
            "internalType": "bytes4",
            "name": "",
            "type": "bytes4"
          },
          {
            "internalType": "BeforeSwapDelta",
            "name": "",
            "type": "int256"
          },
          {
            "internalType": "uint24",
            "name": "",
            "type": "uint24"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "buyThreshold",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "cDelta",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "ethPriceT",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "ethPriceT1",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "pure",
        "type": "function",
        "name": "getHookPermissions",
        "outputs": [
          {
            "internalType": "struct Hooks.Permissions",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "bool",
                "name": "beforeInitialize",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterInitialize",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeAddLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterAddLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeRemoveLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterRemoveLiquidity",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeSwap",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterSwap",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeDonate",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterDonate",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "beforeSwapReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterSwapReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterAddLiquidityReturnDelta",
                "type": "bool"
              },
              {
                "internalType": "bool",
                "name": "afterRemoveLiquidityReturnDelta",
                "type": "bool"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getLpFee",
        "outputs": [
          {
            "internalType": "uint24",
            "name": "",
            "type": "uint24"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "struct PoolKey",
            "name": "key",
            "type": "tuple",
            "components": [
              {
                "internalType": "Currency",
                "name": "currency0",
                "type": "address"
              },
              {
                "internalType": "Currency",
                "name": "currency1",
                "type": "address"
              },
              {
                "internalType": "uint24",
                "name": "fee",
                "type": "uint24"
              },
              {
                "internalType": "int24",
                "name": "tickSpacing",
                "type": "int24"
              },
              {
                "internalType": "contract IHooks",
                "name": "hooks",
                "type": "address"
              }
            ]
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getTickLiquidity",
        "outputs": [
          {
            "internalType": "uint128",
            "name": "liquidity",
            "type": "uint128"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "i_owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "initialLpFee",
        "outputs": [
          {
            "internalType": "uint24",
            "name": "",
            "type": "uint24"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "poolId",
        "outputs": [
          {
            "internalType": "PoolId",
            "name": "",
            "type": "bytes32"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "PoolId",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "poolIdToBlock",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "poolManager",
        "outputs": [
          {
            "internalType": "contract IPoolManager",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "sellThreshold",
        "outputs": [
          {
            "internalType": "int256",
            "name": "",
            "type": "int256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "unlockCallback",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "",
            "type": "bytes"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newAlpha",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateAlpha"
      },
      {
        "inputs": [
          {
            "internalType": "int256",
            "name": "newBuyThreshold",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateBuyThreshold"
      },
      {
        "inputs": [
          {
            "internalType": "int256",
            "name": "newSellThreshold",
            "type": "int256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "updateSellThreshold"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "params": {
            "amount0": "The amount of token0 being donated",
            "amount1": "The amount of token1 being donated",
            "hookData": "Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook",
            "key": "The key for the pool",
            "sender": "The initial msg.sender for the donate call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "params": {
            "delta": "The caller's balance delta after adding liquidity; the sum of principal delta, fees accrued, and hook delta",
            "feesAccrued": "The fees accrued since the last time fees were collected from this position",
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for removing liquidity",
            "sender": "The initial msg.sender for the remove liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook",
            "_1": "BalanceDelta The hook's delta in token0 and token1. Positive: the hook is owed/took currency, negative: the hook owes/sent currency"
          }
        },
        "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "params": {
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for adding liquidity",
            "sender": "The initial msg.sender for the add liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "params": {
            "amount0": "The amount of token0 being donated",
            "amount1": "The amount of token1 being donated",
            "hookData": "Arbitrary data handed into the PoolManager by the donor to be be passed on to the hook",
            "key": "The key for the pool",
            "sender": "The initial msg.sender for the donate call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeInitialize(address,(address,address,uint24,int24,address),uint160,bytes)": {
          "details": "Sets up initial price and ensures the pool uses dynamic fees",
          "params": {
            "key": "The PoolKey for the new pool"
          }
        },
        "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "params": {
            "hookData": "Arbitrary data handed into the PoolManager by the liquidity provider to be be passed on to the hook",
            "key": "The key for the pool",
            "params": "The parameters for removing liquidity",
            "sender": "The initial msg.sender for the remove liquidity call"
          },
          "returns": {
            "_0": "bytes4 The function selector for the hook"
          }
        },
        "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": {
          "details": "Calculates price impact and adjusts fees accordingly",
          "params": {
            "key": "The PoolKey for the swap",
            "params": "The swap parameters"
          }
        },
        "constructor": {
          "params": {
            "_manager": "The address of the Uniswap V4 PoolManager"
          }
        },
        "getHookPermissions()": {
          "returns": {
            "_0": "Hooks.Permissions The set of permissions required by this hook"
          }
        },
        "getLpFee()": {
          "returns": {
            "_0": "The current LP fee"
          }
        },
        "unlockCallback(bytes)": {
          "details": "We force the onlyPoolManager modifier by exposing a virtual function after the onlyPoolManager check.",
          "params": {
            "data": "The data that was passed to the call to unlock"
          },
          "returns": {
            "_0": "Any data that you want to be returned from the unlock call"
          }
        },
        "updateAlpha(uint256)": {
          "params": {
            "newAlpha": "The new alpha value"
          }
        },
        "updateBuyThreshold(int256)": {
          "params": {
            "newBuyThreshold": "The new buy threshold value"
          }
        },
        "updateSellThreshold(int256)": {
          "params": {
            "newSellThreshold": "The new sell threshold value"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "afterDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "notice": "The hook called after donate"
        },
        "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,int256,bytes)": {
          "notice": "The hook called after liquidity is removed"
        },
        "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "notice": "The hook called before liquidity is added"
        },
        "beforeDonate(address,(address,address,uint24,int24,address),uint256,uint256,bytes)": {
          "notice": "The hook called before donate"
        },
        "beforeInitialize(address,(address,address,uint24,int24,address),uint160,bytes)": {
          "notice": "Initializes the hook for a new pool"
        },
        "beforeRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)": {
          "notice": "The hook called before liquidity is removed"
        },
        "beforeSwap(address,(address,address,uint24,int24,address),(bool,int256,uint160),bytes)": {
          "notice": "Executes before a swap operation"
        },
        "constructor": {
          "notice": "Initializes the contract with the Uniswap V4 PoolManager"
        },
        "getHookPermissions()": {
          "notice": "Defines the permissions for this hook in the Uniswap V4 ecosystem"
        },
        "getLpFee()": {
          "notice": "Retrieves the current LP fee for the pool"
        },
        "poolManager()": {
          "notice": "The Uniswap v4 PoolManager contract"
        },
        "unlockCallback(bytes)": {
          "notice": "Called by the pool manager on `msg.sender` when the manager is unlocked"
        },
        "updateAlpha(uint256)": {
          "notice": "Updates the alpha value"
        },
        "updateBuyThreshold(int256)": {
          "notice": "Updates the buy threshold"
        },
        "updateSellThreshold(int256)": {
          "notice": "Updates the sell threshold"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@ensdomains/=lib/v4-periphery/lib/v4-core/node_modules/@ensdomains/",
      "@openzeppelin/=lib/v4-periphery/lib/v4-core/lib/openzeppelin-contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "@uniswap/v4-core/=lib/v4-periphery/lib/v4-core/",
      "chainlink-brownie-contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.6/vendor/@arbitrum/nitro-contracts/src/",
      "chainlink/=lib/chainlink/",
      "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-gas-snapshot/=lib/v4-periphery/lib/v4-core/lib/forge-gas-snapshot/src/",
      "forge-std/=lib/forge-std/src/",
      "hardhat/=lib/v4-periphery/lib/v4-core/node_modules/hardhat/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "permit2/=lib/v4-periphery/lib/permit2/",
      "solmate/=lib/v4-periphery/lib/v4-core/lib/solmate/",
      "v4-core/=lib/v4-periphery/lib/v4-core/src/",
      "v4-periphery/=lib/v4-periphery/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "src/NezlobinDirectionalFee.sol": "NezlobinDirectionalFee"
    },
    "evmVersion": "cancun",
    "libraries": {}
  },
  "sources": {
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "keccak256": "0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd",
      "urls": [
        "bzz-raw://644cff84052e1e82b5bb502b2a46e8f142a62b0db4cd9b38200798ba8373c6f7",
        "dweb:/ipfs/QmTa99QHrJBn3SXDizquPBUiTxVCNKQrHgaWJhuds5Sce2"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IExtsload.sol": {
      "keccak256": "0x80b53ca4907d6f0088c3b931f2b72cad1dc4615a95094d96bd0fb8dff8d5ba43",
      "urls": [
        "bzz-raw://375c69148622aab7a3537d5fd37d373a8e9731022c8d87bdaee46233b0a99fe1",
        "dweb:/ipfs/QmXFjdoYRxsA5B1kyuxEXgNf3FBoL1zPvy26Qy8EtpdFRN"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IExttload.sol": {
      "keccak256": "0xc6b68283ebd8d1c789df536756726eed51c589134bb20821b236a0d22a135937",
      "urls": [
        "bzz-raw://294394f72dfc219689209f4130d85601dfd0d63c8d47578050d312db70f9b6c8",
        "dweb:/ipfs/QmTDMQ3oxCGHgEBU48a3Lp4S1rRjc8vVCxkhE5ZNej1bsY"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IHooks.sol": {
      "keccak256": "0x2ed03c5c22b1b81490788f54599beb3b26b834e608f6351166f60069f5655671",
      "urls": [
        "bzz-raw://aabb296e1109ccc792e444c63d96c04f75f74275fbd917083b65aa18cc9eb662",
        "dweb:/ipfs/QmWjVWjC831FM6W9yk7ys8vmMesmHb3XrskvTzkFM8q7pK"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IPoolManager.sol": {
      "keccak256": "0x859e8c7794fc04a72e53d4e9d2b89ae5517f71409a667fc2f4db054c9d121168",
      "urls": [
        "bzz-raw://690097a7065d05ba5641b4a12c91a561c566209313307b5d74d989bcc00c3221",
        "dweb:/ipfs/QmbxiRHURJhcUMJ5NfZg3V1BgVowPQQ263UH43De4DvEBj"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IProtocolFeeController.sol": {
      "keccak256": "0xc2d7f3605da9767e36cf25d4d4fa9b95663a6659e26ce28cf29b8b88acb79a4c",
      "urls": [
        "bzz-raw://c7a43cda35b8a9254ed3e46cfd8649361f09121d17ef554bd3d190b9a8d57cc6",
        "dweb:/ipfs/QmRBDQoqCWddH5hY1JdxMyYtY8jMZhWAwtuFJBc3r8V31G"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/IProtocolFees.sol": {
      "keccak256": "0x6274aeb7a4f03734502f3b1b5494f7738d3f3adfa3a15aebf383ce1d2698e971",
      "urls": [
        "bzz-raw://ed366e17dc42f9b230b8b7bb27e2c304ea71b7edb11b5738f75a1090f34648f4",
        "dweb:/ipfs/QmVqZbCQ46B5huP8LsDcxbquqCdd74uvhe3F47KqRLAGeq"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/callback/IUnlockCallback.sol": {
      "keccak256": "0x58c82f2bd9d7c097ed09bd0991fedc403b0ec270eb3d0158bfb095c06a03d719",
      "urls": [
        "bzz-raw://91168ca26a10980df2cdc3fbfe8ddf372c002b7ef19e3c59a0c9870d64198f1b",
        "dweb:/ipfs/QmUSpaM825vd1SwvF38esgbdLgYiPwefKaFERTWvUi6uSK"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/external/IERC20Minimal.sol": {
      "keccak256": "0xc1c23330c1511ecfd45c67a683962b4e2555b82f1dacd40cc8b46ae5a6e250e7",
      "urls": [
        "bzz-raw://5ce10b7970482a65f9e9a365b810eeb154a5d4a8229a26653028d84b9622a410",
        "dweb:/ipfs/QmTSwXxZ2FTkM5duBZgbpFs8SRVDR5NPAnW4YimeDhb1s8"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/interfaces/external/IERC6909Claims.sol": {
      "keccak256": "0xa586f345739e52b0488a0fe40b6e375cce67fdd25758408b0efcb5133ad96a48",
      "urls": [
        "bzz-raw://e8c557b7e52abdbbd82e415a1acc27921446a7fd090b7d4877e52be72619547f",
        "dweb:/ipfs/QmXE2KNPbXmGX8BQF3ei6zhzRTnhoTQg39XmqMnkhbr6QK"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/CustomRevert.sol": {
      "keccak256": "0x745ca9c258d00fae52f293af065471f1bc1099de1bea4ceb52e312240ac52895",
      "urls": [
        "bzz-raw://71eee0aa4e395f2c7fce16760d6547c6a12a6fd3dc56b94f4d44480fed538495",
        "dweb:/ipfs/QmPfJBiHzeVe9sx3PZ27jWrzJqF9atvevpYBC9j3Ekz9TG"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/FixedPoint128.sol": {
      "keccak256": "0xc7e80dc41f28887d0d915a75c0b2783ae659e5384dd1a3ed1251a42e058d8835",
      "urls": [
        "bzz-raw://2df62bf1d9d4349236fd0bc7a96b3a3be95f4c049603e4a20c8473cca9402b4d",
        "dweb:/ipfs/QmVR5dmMkoypmhaBeBj8cGegHpJycbofUDg59dHm42i9MT"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/FullMath.sol": {
      "keccak256": "0x4fc73a00817193fd3cac1cc03d8167d21af97d75f1815a070ee31a90c702b4c2",
      "urls": [
        "bzz-raw://c3b2d66d36b1ad56b1ab6e2eb8a816740877b40b461c93f125e88621c8378e52",
        "dweb:/ipfs/QmPGvMZzKQvNiWKd8aRzzdW7oAizwrMgcMtnaworDkVHFC"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/Hooks.sol": {
      "keccak256": "0x33b963d98de5eadd5b42a4d323ce5d25d87432d8ed538096ecca8d0b77e0d088",
      "urls": [
        "bzz-raw://4ef49b43fe2fa6a2c6e44a1f8d7712ce4e13c7656da5ec35e73eb644707e5ed1",
        "dweb:/ipfs/QmZCisxCf9a1zxZvZADk1EN8JyFXZ1XZ4B8s1PpwEMugJX"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/LPFeeLibrary.sol": {
      "keccak256": "0x9cb794c60d4c867732b20a6cd14b965bf3a63df1161eb3cd28e2c9d0447db46f",
      "urls": [
        "bzz-raw://3d987ee5738f74c3fb091db503b44ad6651e4e47554623182e0ecbe696bd7382",
        "dweb:/ipfs/QmW7Rt5qjD4mmRnvYcT2Fj7VPzBm1eT9w15WUHtfWmKEPh"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/LiquidityMath.sol": {
      "keccak256": "0x4a04b9383e2fb943c2c3ae7d0c9071b58dd97b6dac0a409fe1c79c3ca897bbcf",
      "urls": [
        "bzz-raw://0b33cf0ff936f62aa7f3b82922fa0ac52ac24471561e87fbf7ab8372607f6dfc",
        "dweb:/ipfs/Qmcr6omwzJjQPu6HQ8E9vFXaTgrtqfb2KbfxbuQavfUzFa"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/ParseBytes.sol": {
      "keccak256": "0xf0795198d1e651b0b33fd1708d80a14f501bb2a1486905676d35f364e880f579",
      "urls": [
        "bzz-raw://5aea527fcec51d7274f0c189dc2479a6aa708fc91857187a4d7db46bb1d6c7a8",
        "dweb:/ipfs/QmUTrwTPSZ7EHBaTyfAA78rZVP17iQzmAmvDcQ8GhDRAEf"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/Position.sol": {
      "keccak256": "0xddab2a831f1befb6abf5567e77c4582169ca8156cf69eb4f22d8e87f7226a3f9",
      "urls": [
        "bzz-raw://c79fe61b50f3b70cff503abfa6f5643fcbefb9b794855bee1019b1e6d9c083b2",
        "dweb:/ipfs/QmbKmYNQesaMz8bo1b7TMHQcAwaDd3eDPrE5pAdPPZTtk5"
      ],
      "license": "BUSL-1.1"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/SafeCast.sol": {
      "keccak256": "0x8060d21c4d54a431113f9a594b860e6a9bf1f346d0c7c02dfafe9847dd8a0591",
      "urls": [
        "bzz-raw://e7f71b73d82965d1d949f388060f6f0daab7cd14718e260682918ec6fa0253b9",
        "dweb:/ipfs/QmP85jtFrCeV6Y8zuJfrrgiMy1shX3tHWs2wX7DMAB7Lft"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/lib/v4-core/src/libraries/StateLibrary.sol": {
      "keccak256": "0x4bbb1e816dd67fd4e958518ef50d216fcdab19912ab98c28d4c5279890c48c2c",
      "urls": [
        "bzz-raw://eab2611adf69904cb0f326dbd82cdd6d1a09630dacace7f741e29c76836e41e8",
        "dweb:/ipfs/QmcCR78dZ8C7pF3DSDoWyYobX7aXkBNxbCmgenkqpgRrbT"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/types/BalanceDelta.sol": {
      "keccak256": "0xa719c8fe51e0a9524280178f19f6851bcc3b3b60e73618f3d60905d35ae5569f",
      "urls": [
        "bzz-raw://7436928dc9de35c6c7c5c636cb51adaf295cfd590da83b19a004ae33cbec9ef9",
        "dweb:/ipfs/QmRJ9yZkUpzk4433GX3LgVVL8jwpbSYSUwXcucKisf3v4H"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/types/BeforeSwapDelta.sol": {
      "keccak256": "0x2a774312d91285313d569da1a718c909655da5432310417692097a1d4dc83a78",
      "urls": [
        "bzz-raw://a2c7a0379955cff9c17ab9e61f95e42909aa5947c22740f86ce940d09856f782",
        "dweb:/ipfs/QmaAuo8UBYXsGrVuKh8iRoAAdqwtg1jDq515cW1ZRP5m9K"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/types/Currency.sol": {
      "keccak256": "0x35c74eae038ecfbbae48b0e13f2b9a43ac6d8da4847ffa0f1482e4e2d455ee74",
      "urls": [
        "bzz-raw://cadb54f9c89b6970583148e503a23c7b654aff1f3e6a0da57705c54e5b03b39f",
        "dweb:/ipfs/Qma3CKKwyzGwzHN4Z9HDJ4Q7J5VfbN594i8F2DTGWTMWcB"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/types/PoolId.sol": {
      "keccak256": "0x308311916ea0f5c2fd878b6a2751eb223d170a69e33f601fae56dfe3c5d392af",
      "urls": [
        "bzz-raw://669c2cd7ac17690b5d8831e0bda72822376c3a04b36afed6d31df4d75fe60918",
        "dweb:/ipfs/QmT6EpkxqU8VF3WsgrZ66F3s1cCQRffR95z1HDYZz7ph6y"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/lib/v4-core/src/types/PoolKey.sol": {
      "keccak256": "0xf89856e0580d7a4856d3187a76858377ccee9d59702d230c338d84388221b786",
      "urls": [
        "bzz-raw://6f3118fa189025695c37fdf0bdd1190f085ad097484d3c88cf4c56d1db65f639",
        "dweb:/ipfs/QmamXpgtB8GV1CaFLvqefPWSoikLDhMk1yU4heBnVzU8gi"
      ],
      "license": "MIT"
    },
    "lib/v4-periphery/src/base/ImmutableState.sol": {
      "keccak256": "0x12b175e4ed6d31da545e3b6c9930901568c99d153b1e51044d32e88f42b9b633",
      "urls": [
        "bzz-raw://f4347899e0b3bfd66e8d79652b1a14a62a02d16bfece63a40c6efe0e5656c384",
        "dweb:/ipfs/QmSbbT8fefHstA72BqF7SDooDtmhs79dR8T6pWv8LxKU2L"
      ],
      "license": "GPL-2.0-or-later"
    },
    "lib/v4-periphery/src/base/SafeCallback.sol": {
      "keccak256": "0x6284bd1d1fbe78a901e63dc70720e2bf19de6758347b050f8ba2b155e73325c5",
      "urls": [
        "bzz-raw://3afb423a3c0f8b5f6436680ff3cde9247924d442a9720dc39b2b07a352607187",
        "dweb:/ipfs/QmaT5bMwiiqkp8KWUnHjWJz55Ah9vbpASzJagg9riHbpTf"
      ],
      "license": "GPL-3.0-or-later"
    },
    "lib/v4-periphery/src/base/hooks/BaseHook.sol": {
      "keccak256": "0xe6522a26dfe7b86aea6a84670b502890ede1e96302d641f231906897b2172f2f",
      "urls": [
        "bzz-raw://19d2d2678ca32e81af3419bc4640833fc40e155b6757bb87edb0182f181c7fe7",
        "dweb:/ipfs/QmPGpN6p78SrRW79hX16sM572uD4Fb2hJF6Bv58M9LYNpQ"
      ],
      "license": "GPL-3.0-or-later"
    },
    "src/NezlobinDirectionalFee.sol": {
      "keccak256": "0x02918af2a5a70987f4c1151b9af902a36cd8914c20bb546b34905cd1518bb126",
      "urls": [
        "bzz-raw://90ffa911e34032dceb55334adcbae459acf6203072ea609b95fee320f73dee1b",
        "dweb:/ipfs/QmZ6aLFGGSPpd6GL7rCTUKAVTQNpVfEAAKeceiHYQMAvcZ"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}
